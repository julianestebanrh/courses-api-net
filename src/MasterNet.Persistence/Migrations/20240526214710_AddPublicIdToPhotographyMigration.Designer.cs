// <auto-generated />
using System;
using MasterNet.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistence.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    [Migration("20240526214710_AddPublicIdToPhotographyMigration")]
    partial class AddPublicIdToPhotographyMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("56c33824-8943-4cc3-91c4-e5f32d43d9bd"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(585),
                            Title = "Awesome Frozen Tuna"
                        },
                        new
                        {
                            Id = new Guid("75f79db8-463e-4324-8dea-111b3b33165f"),
                            Description = "Ergonomic executive chair upholstered in bonded black leather and PVC padded seat and back for all-day comfort and support",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(643),
                            Title = "Refined Fresh Mouse"
                        },
                        new
                        {
                            Id = new Guid("019f0c3c-b57e-4a0d-9d3e-1e8ce37c614f"),
                            Description = "The Apollotech B340 is an affordable wireless mouse with reliable connectivity, 12 months battery life and modern design",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(680),
                            Title = "Handcrafted Concrete Sausages"
                        },
                        new
                        {
                            Id = new Guid("77834ca3-6ea0-4297-ac93-c6045d59f535"),
                            Description = "The beautiful range of Apple Naturalé that has an exciting mix of natural ingredients. With the Goodness of 100% Natural Ingredients",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(707),
                            Title = "Sleek Concrete Sausages"
                        },
                        new
                        {
                            Id = new Guid("76e79089-e80a-4bc9-9d3a-4f34217b54d4"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(738),
                            Title = "Handmade Granite Bike"
                        },
                        new
                        {
                            Id = new Guid("70f496d8-0ac8-4283-a49e-c8513724d046"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(790),
                            Title = "Awesome Wooden Soap"
                        },
                        new
                        {
                            Id = new Guid("2eae9249-cedf-4755-b566-e84670f5cec0"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(816),
                            Title = "Sleek Rubber Chicken"
                        },
                        new
                        {
                            Id = new Guid("b767eb62-5a67-4730-b3e2-d644efa9f94b"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(844),
                            Title = "Rustic Concrete Chips"
                        },
                        new
                        {
                            Id = new Guid("4f18579c-2676-4841-b870-e5c4ceac44d8"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2024, 5, 26, 16, 47, 8, 367, DateTimeKind.Local).AddTicks(869),
                            Title = "Tasty Concrete Pants"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_instructor", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("courses_prices", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .HasColumnType("TEXT");

                    b.Property<string>("Names")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surnames")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2013b6c-0563-4195-b52f-78e6aad7e13e"),
                            Degree = "National Configuration Administrator",
                            Names = "Alize",
                            Surnames = "Schinner"
                        },
                        new
                        {
                            Id = new Guid("c0c73065-abab-475e-85f5-a0b9fac12ae7"),
                            Degree = "Lead Quality Officer",
                            Names = "Kaleigh",
                            Surnames = "Murphy"
                        },
                        new
                        {
                            Id = new Guid("6e310f34-849d-45cd-8918-ed43cb15474b"),
                            Degree = "Direct Program Technician",
                            Names = "Ervin",
                            Surnames = "Zboncak"
                        },
                        new
                        {
                            Id = new Guid("5b20bf3e-2ffb-4907-ba1e-e55a52ccb967"),
                            Degree = "Future Implementation Liaison",
                            Names = "Dulce",
                            Surnames = "Cummerata"
                        },
                        new
                        {
                            Id = new Guid("6b384928-36ff-41b9-a02b-471937f478e5"),
                            Degree = "District Functionality Manager",
                            Names = "Francis",
                            Surnames = "Wintheiser"
                        },
                        new
                        {
                            Id = new Guid("facf9a25-4b89-49d7-92b3-da1caa63970d"),
                            Degree = "Global Interactions Developer",
                            Names = "Alena",
                            Surnames = "Heller"
                        },
                        new
                        {
                            Id = new Guid("145e5234-3c55-48c3-b2f7-36049b8c5bb3"),
                            Degree = "Product Paradigm Supervisor",
                            Names = "Royal",
                            Surnames = "Jacobi"
                        },
                        new
                        {
                            Id = new Guid("4b916b2d-ee5c-4eab-892d-45755e70243f"),
                            Degree = "Lead Data Consultant",
                            Names = "Milton",
                            Surnames = "Cummerata"
                        },
                        new
                        {
                            Id = new Guid("a374f114-0c05-4031-bdd3-5bb1da0f61a8"),
                            Degree = "Internal Brand Manager",
                            Names = "Ruby",
                            Surnames = "Harber"
                        },
                        new
                        {
                            Id = new Guid("2400ab9d-5d66-4f9e-8617-8ddbb9f60c17"),
                            Degree = "Senior Division Technician",
                            Names = "Rosario",
                            Surnames = "Hintz"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Photography", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("photographies", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Promotion")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("86961ece-ebab-4878-a00f-9c54c58489d9"),
                            Amount = 10.0m,
                            Name = "Regular Price",
                            Promotion = 8.0m
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("MasterNet.Persistence.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Career")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0d0b7eed-f632-404a-ab1d-03d7404529d5",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "222ef28c-b46e-4915-984c-0c1733690a4f",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_UPDATE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_CREATE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_DELETE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_DELETE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "0d0b7eed-f632-404a-ab1d-03d7404529d5"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "222ef28c-b46e-4915-984c-0c1733690a4f"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "222ef28c-b46e-4915-984c-0c1733690a4f"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "222ef28c-b46e-4915-984c-0c1733690a4f"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "222ef28c-b46e-4915-984c-0c1733690a4f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Instructor", "Instructor")
                        .WithMany("CoursesInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("MasterNet.Domain.Photography", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Photographies")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Photographies");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Navigation("CoursesInstructors");
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
