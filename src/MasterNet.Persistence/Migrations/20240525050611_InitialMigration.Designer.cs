// <auto-generated />
using System;
using MasterNet.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MasterNet.Persistence.Migrations
{
    [DbContext(typeof(MasterNetDbContext))]
    [Migration("20240525050611_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.2.24128.4");

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a741be99-13e1-4ab3-9872-427c64a89b50"),
                            Description = "The Nagasaki Lander is the trademarked name of several series of Nagasaki sport bikes, that started with the 1984 ABC800J",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(8601),
                            Title = "Practical Wooden Fish"
                        },
                        new
                        {
                            Id = new Guid("6923ea34-96df-4be4-bef5-10e35d9eb625"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(8680),
                            Title = "Licensed Soft Shoes"
                        },
                        new
                        {
                            Id = new Guid("58ddf938-1537-446a-b1bc-eb74aae61a5f"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(8714),
                            Title = "Intelligent Plastic Pants"
                        },
                        new
                        {
                            Id = new Guid("32c68914-403f-4674-8ea5-e4bd8955fa79"),
                            Description = "The slim & simple Maple Gaming Keyboard from Dev Byte comes with a sleek body and 7- Color RGB LED Back-lighting for smart functionality",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(8807),
                            Title = "Tasty Rubber Bike"
                        },
                        new
                        {
                            Id = new Guid("5cacea8e-9122-46fd-9371-e959a71b57f6"),
                            Description = "Carbonite web goalkeeper gloves are ergonomically designed to give easy fit",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(9236),
                            Title = "Unbranded Plastic Shirt"
                        },
                        new
                        {
                            Id = new Guid("c538f574-4085-4d42-8685-4d01e89e6892"),
                            Description = "Andy shoes are designed to keeping in mind durability as well as trends, the most stylish range of shoes & sandals",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(9509),
                            Title = "Incredible Wooden Ball"
                        },
                        new
                        {
                            Id = new Guid("fd3c9984-bc74-4570-a290-b7ddf07d31bc"),
                            Description = "New range of formal shirts are designed keeping you in mind. With fits and styling that will make you stand apart",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(9569),
                            Title = "Gorgeous Fresh Sausages"
                        },
                        new
                        {
                            Id = new Guid("92bfb7cc-7cfd-4c53-b0ed-fa54066f18d2"),
                            Description = "The Football Is Good For Training And Recreational Purposes",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(9623),
                            Title = "Handmade Concrete Bacon"
                        },
                        new
                        {
                            Id = new Guid("3cf102fa-6078-4070-a414-e5c155edbbd6"),
                            Description = "Boston's most advanced compression wear technology increases muscle oxygenation, stabilizes active muscles",
                            PublicationDate = new DateTime(2024, 5, 25, 0, 6, 10, 473, DateTimeKind.Local).AddTicks(9691),
                            Title = "Intelligent Steel Computer"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.Property<Guid>("InstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("InstructorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("course_instructor", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.HasKey("PriceId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("courses_prices", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Degree")
                        .HasColumnType("TEXT");

                    b.Property<string>("Names")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surnames")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("fa7073fa-a4ae-4543-b930-0a879816da66"),
                            Degree = "Central Solutions Administrator",
                            Names = "Elnora",
                            Surnames = "MacGyver"
                        },
                        new
                        {
                            Id = new Guid("d8c59844-fbf8-4407-8d6d-95de53968477"),
                            Degree = "Global Identity Supervisor",
                            Names = "Olin",
                            Surnames = "Yost"
                        },
                        new
                        {
                            Id = new Guid("f47aa02a-0a72-4ef2-b709-a24f707fa4b6"),
                            Degree = "Human Identity Consultant",
                            Names = "Johan",
                            Surnames = "Cormier"
                        },
                        new
                        {
                            Id = new Guid("2dfb48e9-e12c-4dde-8bee-e89558ac105e"),
                            Degree = "Central Solutions Facilitator",
                            Names = "Norval",
                            Surnames = "Zboncak"
                        },
                        new
                        {
                            Id = new Guid("c9688457-eb30-492b-9429-c5d68fc81ba7"),
                            Degree = "National Security Facilitator",
                            Names = "Cassidy",
                            Surnames = "Gusikowski"
                        },
                        new
                        {
                            Id = new Guid("b0198212-471c-4e92-8a1a-9a16dfd3ee96"),
                            Degree = "Direct Integration Representative",
                            Names = "Celia",
                            Surnames = "Littel"
                        },
                        new
                        {
                            Id = new Guid("98159134-a052-40dd-97dd-0ea11177a427"),
                            Degree = "Lead Communications Executive",
                            Names = "Sasha",
                            Surnames = "Hayes"
                        },
                        new
                        {
                            Id = new Guid("25e05355-05d1-4c09-bac1-d790e1cd525d"),
                            Degree = "Corporate Implementation Coordinator",
                            Names = "Mckayla",
                            Surnames = "Hirthe"
                        },
                        new
                        {
                            Id = new Guid("97c265f8-b103-4ad5-a99d-1dc62326be79"),
                            Degree = "District Solutions Specialist",
                            Names = "Holly",
                            Surnames = "Bradtke"
                        },
                        new
                        {
                            Id = new Guid("cb960cae-d104-42b4-a8a1-166ef0208b36"),
                            Degree = "Human Operations Supervisor",
                            Names = "Lauretta",
                            Surnames = "Bahringer"
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Photography", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("photographies", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("VARCHAR");

                    b.Property<decimal>("Promotion")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("prices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("05f70543-50af-455f-bbe9-32f5aacea7cf"),
                            Amount = 10.0m,
                            Name = "Regular Price",
                            Promotion = 8.0m
                        });
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Commentary")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CourseId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Student")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("ratings", (string)null);
                });

            modelBuilder.Entity("MasterNet.Persistence.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Career")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56122853-5f34-4788-b5f5-da50a7d7921a",
                            Name = "ADMIN",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bdd6c149-35a5-413f-9c7e-bbba8f1e95eb",
                            Name = "CLIENT",
                            NormalizedName = "CLIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_UPDATE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_CREATE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_DELETE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_CREATE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_UPDATE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_DELETE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "56122853-5f34-4788-b5f5-da50a7d7921a"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "POLICIES",
                            ClaimValue = "COURSE_READ",
                            RoleId = "bdd6c149-35a5-413f-9c7e-bbba8f1e95eb"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "POLICIES",
                            ClaimValue = "INSTRUCTOR_READ",
                            RoleId = "bdd6c149-35a5-413f-9c7e-bbba8f1e95eb"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_READ",
                            RoleId = "bdd6c149-35a5-413f-9c7e-bbba8f1e95eb"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "POLICIES",
                            ClaimValue = "COMMENT_CREATE",
                            RoleId = "bdd6c149-35a5-413f-9c7e-bbba8f1e95eb"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MasterNet.Domain.CourseInstructor", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Instructor", "Instructor")
                        .WithMany("CoursesInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("MasterNet.Domain.CoursePrice", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("CoursePrices")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Domain.Price", "Price")
                        .WithMany("CoursePrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("MasterNet.Domain.Photography", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Photographies")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("MasterNet.Domain.Rating", b =>
                {
                    b.HasOne("MasterNet.Domain.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MasterNet.Persistence.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MasterNet.Domain.Course", b =>
                {
                    b.Navigation("CourseInstructors");

                    b.Navigation("CoursePrices");

                    b.Navigation("Photographies");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("MasterNet.Domain.Instructor", b =>
                {
                    b.Navigation("CoursesInstructors");
                });

            modelBuilder.Entity("MasterNet.Domain.Price", b =>
                {
                    b.Navigation("CoursePrices");
                });
#pragma warning restore 612, 618
        }
    }
}
